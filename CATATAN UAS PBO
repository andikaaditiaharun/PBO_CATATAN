Pygame adalah seperangkat modul Python yang dirancang untuk membuat permainan. Pygame menambahkan fungsi di atas dengan sangat baik di SDL perpustakaan. Hal ini memungkinkan Anda untuk membuat sebuah game dengan fitur yang lengkap dan sebuah program multimedia dalam bahasa python.
Tentang Program
	Program ini dibuat untuk memenuhi tugas dari dosen mata kuliah Algoritma dan Pemrograman B. Game yang dibuat oleh penulis disini berjudul Flappy Ball. Penulis menggunakan module tambahan untuk membuat game pada python yaitu pygame.
Cara Main
	Cara memainkan game ini sangat sederhana, player hanya menggunakan arrow up button untuk menaikan bola dan menyeimbangkannya sampai melewati rintangan yang muncul. Setiap kali player berhasil melewati rintangan, score akan dihitung satu point dan rintangan akan muncul lagi dengan posisi yang berbeda (random).
 
Logika Program:
 import pygame
from random import randint// Untuk memanggil module pygame.
Module randint digunakan untuk merandom type int .


black = (0, 0, 0)
white = (255, 255, 255)
blue = (0, 255, 255)
green = (0, 255, 0)
red = (255, 0, 0)// Untuk membuat variable warna yang akan dipanggil untuk memberi warna pada objek.


pygame.init()//Untuk menginisialisasi module pygame.


size = (700, 500)
screen = pygame.display.set_mode(size)// Membuat variable size untuk dipanggil di variable screen yang ditujukan untuk menentukan lebar dan panjang window/frame untuk game ini.


pygame.display.set_caption("Flappy Ball")// Untuk memberi judul game.
Var done untuk menentukan program aktif / tidak.
Membuat variable clock untuk membuat objek dapat membaca waktu.


done = False
clock = pygame.time.Clock()

def ball(x,y):
    pygame.draw.circle(screen, blue, (x,y), 20)// Mendefinisika
def obstacle(xloc, yloc, xsize, ysize):
    pygame.draw.rect(screen, green, (xloc, yloc, xsize, ysize))
    pygame.draw.rect(screen, green, (xloc, int(yloc+ysize+space), xsize, ysize+500))
Code diatas untuk mendefinisikan fungsi obstacle / rintangan. Isi dari fungsi ini adalah membuat objek obstacle.


def Score(score):
    font = pygame.font.SysFont(None, 55)
    text = font.render("Score: "+str(score), True, black)
    screen.blit(text, (0, 0))// Mendefinisikan fungsi score. Isi dari fungsi ini adalah untuk memunculkan text score dengan warna dan posisi yang sudah ditentukan.


x = 350
y = 250
x_speed = 0
y_speed = 0
ground = 480
xloc = 700
yloc = 0
xsize = 100
ysize = randint(0, 350)
space = 150
obspeed = 2.5
score = 0// Blok code ini untuk membuat variable yang digunakan dalam program. 


while not done:// Membuat kondisi dimana ketika belum 
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                y_speed = -10// Kondisi dimana event.type nya jika user menekan arrow up maka karakter utama diberi speed sebesar -10 yang menyebabkan karakter utama ketas
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_UP:
                y_speed = 5// Kemudian fungsi ini digunakan untuk memberikan speed ke bawah ketika karakter menekan arrow atas. 
Ini yang menyebabkan efek grafitasi.
Ini
    screen.fill(white)
    ball(x,y)
    obstacle(xloc, yloc, xsize, ysize)
    Score(score)// Mensetting layar dengan background warna putih, menempatkan posisi karakter utama, menempatkan rintangan dan menaruh fungsi Score untuk mengitung nilai.
    y += y_speed
    xloc -= obspeed Untuk menambah kecepatan pada garis y.
Untuk mensetting kecepatan rintangan.


    if y > ground:
        gameover()
        y_speed = 0
        obspeed = 0// Kondisi dimana jika y lebih besar dari ground maka fungsi gameover() akan dipanggil dan y speed = 0 dan obspeed juga = 0.
    if x+20 > xloc and y-20 < ysize and x-15 < xsize+xloc:
        gameover()
        y_speed = 0
        obspeed = 0// Untuk mensetting rintangan pada bagian atas jika karakter terkena rintangan pada bagian atas maka fungsi gameover() akan dijalankan dan yspeed = 0 begitu juga obspeed.




    if x+20 > xloc and y+20 > ysize+space and x-15 < xsize+xloc:
        gameover()
        y_speed = 0
        obspeed = 0// Untuk mensetting rintangan pada bagian bawah jika karakter terkena rintangan pada bagian bawah maka fungsi gameover() akan dijalankan dan yspeed = 0 begitu juga obspeed.


    if x > xloc and x < xloc+5:
        score = (score + 1)// Mensetting kondisi untuk fungsi Score. Jika karakter utama ( posisi x karakter utama ) lebih dari posisi rintangan maka Score akan ditambah 1 point.


    if xloc < -80:
        xloc = 700
        ysize = randint(0, 350)// Mensetting lebar rintangan dengan module randint yang sudah dipanggil tadi untuk merandom size yang keluar selanjutnya.



    pygame.display.flip() 
    clock.tick(60)// Untuk mengupdate tampilan pada layar.
Untuk mengupdate waktu.


pygame.quit()   //Untuk memanggil fungsi quit yang mana akan mengeluarkan program.




 


dan Kivy sendiri merupakan framework yang dibangun menggunakan library dari bahasa pemrograman Python yang bersifat Open Source.
Tujuan dikembangkannya framework ini agar dapat membantu developer secara cepat dalam mengembangkan aplikasi yang memiliki tampilan antarmuka inovatif seperti aplikasi yang mendukung multitouch.
from random import random
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.button import Button
from kivy.graphics import Color, Ellipse, Line



class MyPaintWidget(Widget):

    def on_touch_down(self, touch):
        color = (random(), 1, 1)
        with self.canvas:
            Color(*color, mode='hsv')
            d = 30.
            Ellipse(pos=(touch.x - d / 4, touch.y - d / 4), size=(d, d))
            touch.ud['lines_loop'] = Line(points=(touch.x, touch.y))

    def on_touch_move(self, touch):
        touch.ud['lines_loop'].points += [touch.x, touch.y]


class MyPaintApp(App):

    def build(self):
        parent = Widget()
        self.painter = MyPaintWidget()
        clearbtn = Button(text='Clear')
        clearbtn.bind(on_release=self.clear_canvas)
        parent.add_widget(self.painter)
        parent.add_widget(clearbtn)
        return parent

    def clear_canvas(self, obj):
        self.painter.canvas.clear()


if __name__ == '__main__':
    MyPaintApp().run()



